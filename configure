#!/bin/sh

# This configure script written by Brian Callahan <bcallah@openbsd.org>
# and released into the Public Domain.

Makefile() {
cat << EOF > Makefile
# This Makefile automatically generated by configure.

DMD =		$dmd
DFLAGS =	$dflags

BINDIR =	$bindir
INCDIR =	$incdir
LIBDIR =	$libdir
MANDIR =	$mandir

PROG =	4q
LIB =	lib\${PROG}.a

STDINC =	stdinc.4th

all:
EOF
if [ $fullpath -eq 1 ] ; then
cat << EOF >> Makefile
	\${DMD} \${DFLAGS} $oflag config.d $spath/main.d $spath/opt.d
EOF
else
cat << EOF >> Makefile
	\${DMD} \${DFLAGS} $oflag config.d main.d opt.d
EOF
fi

cat << EOF >> Makefile
	touch lib\${PROG}.4th
	./\${PROG} -O2 -gen_lib lib\${PROG}.4th
	rm -f lib\${PROG}.4th

install:
	install -d \${DESTDIR}\${BINDIR}
	install -d \${DESTDIR}\${INCDIR}
	install -d \${DESTDIR}\${LIBDIR}
	install -d \${DESTDIR}\${MANDIR}/man1
	install -c -s -m 755 \${PROG} \${DESTDIR}\${BINDIR}
	install -c -m 444 \${STDINC} \${DESTDIR}\${INCDIR}
	install -c -m 444 \${LIB} \${DESTDIR}\${LIBDIR}
	install -c -m 444 \${PROG}.1 \${DESTDIR}\${MANDIR}/man1

test:
	@echo "No tests"

clean:
	rm -f \${PROG} \${PROG}.o \${LIB}

distclean: clean
	rm -f Makefile config.d \${PROG}.core
EOF
}

die() {
  printf "%s\n" "$1"
  exit 1
}

archeck() {
  command -v ar > /dev/null 2>&1
  if [ $? -ne 0 ] ; then
    echo "not found"
    die "Missing ar utility"
  fi
  ar="ar"
}

ascheck() {
  for assembler in "$AS" as "$cc -c" ; do
cat << EOF > conftest.s
	ret
EOF
    $assembler -o conftest.o conftest.s > /dev/null 2>&1
    status=$?
    rm -f conftest.o conftest.s
    if [ $status -eq 0 ] ; then
      return 0
    fi
  done
  echo "not found"
  die "error: Could not find a working assembler"
}

cccheck() {
  for cc in "$CC" cc clang gcc ; do
cat << EOF > conftest.c
int main(void){return 0;}
EOF
    $cc -o conftest.o -c conftest.c > /dev/null 2>&1
    $cc -o conftest conftest.o > /dev/null 2>&1
    status=$?
    rm -f conftest conftest.o conftest.c
    if [ $status -eq 0 ] ; then
      return 0
    fi
  done
  echo "not found"
  die "error: Could not find a working C compiler"
}

cppcheck() {
  for preprocessor in "$PREPROCESSOR" cpp "$cc -E" ; do
cat << EOF > conftest.c
#include "conftest.h"
EOF
cat << EOF > conftest.h
int main(void){return 0;}
EOF
    if [ "x$preprocessor" = "x$cc -E" ] ; then
      $preprocessor conftest.c -o conftest.i > /dev/null 2>&1
    else
      $preprocessor conftest.c conftest.i > /dev/null 2>&1
    fi
    status=$?
    rm -f conftest.i conftest.h conftest.c
    if [ $status -eq 0 ] ; then
      return 0
    fi
  done
  echo "not found"
  die "error: Could not find a working C preprocessor"
}

dmdcheck() {
  for compiler in "$DMD" ldc2 gdc dmd ; do
cat << EOF > conftest.d
void main(){}
EOF
    ($compiler --version | grep -q "LDC - the LLVM D compiler") > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      is="ldc"
    else
      ($compiler --version | grep -q "Free Software Foundation") > /dev/null 2>&1
      if [ $? -eq 0 ] ; then
        is="gdc"
      else
        is="dmd"
      fi
    fi
    if [ "x$DFLAGS" = "x" ] ; then
      case "$is" in
        "dmd")
          dflags="-O -inline"
          oflag="-of4q"
          ;;
        "gdc")
          dflags="-O2 -pipe -finline"
          oflag="-o \${PROG}"
          ;;
        "ldc")
          dflags="-O2"
          oflag="-of4q"
          ;;
      esac
    fi
    if [ "x$is" = "xgdc" ] ; then
      $compiler $dflags -o conftest conftest.d > /dev/null 2>&1
    else
      $compiler $dflags conftest.d > /dev/null 2>&1
    fi
    status=$?
    rm -f conftest conftest.o conftest.d
    if [ $status -eq 0 ] ; then
      dmd="$compiler"
      return 0
    fi
  done
  return 1
}

echocheck() {
cat << EOF > conftest.c
#include <stdio.h>
#include <termios.h>
int main(void){(void)printf("%d", ECHO);return 0;}
EOF
  $cc -o conftest.o -c conftest.c
  $cc -o conftest conftest.o
  techo="$(./conftest)"
  rm -f conftest conftest.o conftest.c
}

icanoncheck() {
cat << EOF > conftest.c
#include <stdio.h>
#include <termios.h>
int main(void){(void)printf("%d", ICANON);return 0;}
EOF
  $cc -o conftest.o -c conftest.c
  $cc -o conftest conftest.o
  icanon="$(./conftest)"
  rm -f conftest conftest.o conftest.c
}

lcallcheck() {
cat << EOF > conftest.c
#include <locale.h>
LC_ALL
EOF
  lcall="$($preprocessor conftest.c | tail -n 1)"
  rm -f conftest.c
}

# To add your OS:
# 1. Write a simple "true" program: int main(void){return 0;}
# 2. Run `cc -v -o true true.c`
# 3. If it's gcc or clang, it will print its linker invocation at the end.
ldcheck() {
cat << EOF > config.d
/+ This file automatically generated by configure.  +/

module config;

enum arch {
    arm64,
    rv64,
    x64
}

enum system {
    darwin,
    freebsd,
    linux
}

EOF
  if [ "x$os" = "xdarwin" ] ; then
cat << EOF >> config.d
string[] ld_args = ["-demangle", "-lto_library", "$xcode/usr/lib/libLTO.dylib", "-dynamic", "-arch", "$cpu", "-platform_version", "macos", "$macos.0.0", "$macos.$minor", "-syslibroot", "$xcode/SDKs/MacOSX.sdk", "-mllvm", "-enable-linkonceodr-outlining", "-o", "-L/usr/local/lib", "-lSystem", "$xcode/usr/lib/clang/$clang_ver/lib/darwin/libclang_rt.osx.a"];
EOF
  fi
  if [ "x$os" = "xlinux" ] ; then
cat << EOF >> config.d
string[] ld_args = ["-z", "relro", "--hash-style=gnu", "--build-id", "--eh-frame-hdr", "-m", "$emul", "-pie", "-dynamic-linker", "$ldso", "-o", "/lib/$gcclibdir/Scrt1.o", "/lib/$gcclibdir/crti.o", "/usr/lib/gcc/$gcclibdir/$gcc_major/crtbeginS.o", "-L/lib/$gcclibdir", "-L/lib64", "-L/usr/lib64", "-L/usr/lib/gcc/$gcclibdir/$gcc_major", "-lgcc", "-lc", "-lgcc", "/usr/lib/gcc/$gcclibdir/$gcc_major/crtendS.o", "/lib/$gcclibdir/crtn.o"];
EOF
  fi
  if [ "x$os" = "xfreebsd" ] ; then
cat << EOF >> config.d
string[] ld_args = ["--eh-frame-hdr", "-dynamic-linker", "/libexec/ld-elf.so.1", "--hash-style=both", "--enable-new-dtags", "-o", "/usr/lib/crt1.o", "/usr/lib/crti.o", "/usr/lib/crtbegin.o", "-L/usr/lib", "-lgcc", "-lc", "-lgcc", "/usr/lib/crtend.o", "/usr/lib/crtn.o"];
EOF
  fi
  linker="$ld"
}

machinecheck() {
  cpu=$(uname -m)
  os=$(uname -s | tr '[:upper:]' '[:lower:]')
}

qbecheck() {
  for ir in "$QBE" qbe ; do
cat << EOF > conftest.ssa
export function w \$main() {
@start
	ret 0
}
EOF
    $ir conftest.ssa > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      rm -f conftest.ssa
      qbe="$ir"
      return 0
    fi
    rm -f conftest.ssa
  done
  echo "not found"
  die "error: Could not find a working QBE"
}

ranlibcheck() {
  command -v ranlib > /dev/null 2>&1
  if [ $? -ne 0 ] ; then
    echo "not found"
    die "Missing ranlib utility"
  fi
  ranlib="ranlib"
}

stderrcheck() {
cat << EOF > conftest.c
#include <stdio.h>
stderr
EOF
  stderr="$($preprocessor conftest.c | tail -n 1)"
  rm -f conftest.c
}

stdincheck() {
cat << EOF > conftest.c
#include <stdio.h>
stdin
EOF
  stdin="$($preprocessor conftest.c | tail -n 1)"
  rm -f conftest.c
}

stdoutcheck() {
cat << EOF > conftest.c
#include <stdio.h>
stdout
EOF
  stdout="$($preprocessor conftest.c | tail -n 1)"
  rm -f conftest.c
}

tcsanowcheck() {
cat << EOF > conftest.c
#include <stdio.h>
#include <termios.h>
int main(void){(void)printf("%d", TCSANOW);return 0;}
EOF
  $cc -o conftest.o -c conftest.c
  $cc -o conftest conftest.o
  tcsanow="$(./conftest)"
  rm -f conftest conftest.o conftest.c
}

termioscheck() {
cat << EOF > conftest.c
#include <stdio.h>
#include <termios.h>
int main(void){(void)printf("%lu",sizeof(struct termios));return 0;}
EOF
  $cc -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc -o conftest conftest.o > /dev/null 2>&1
  termios="$(./conftest)"
  rm -f conftest conftest.o conftest.c
}

termiosccvmincheck() {
cat << EOF > conftest.c
#include <stddef.h>
#include <stdio.h>
#include <termios.h>
int main(void){size_t sz=offsetof(struct termios,c_cc[VMIN]);(void)printf("%zu",sz);return 0;}
EOF
  $cc -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc -o conftest conftest.o > /dev/null 2>&1
  ccvmin="$(./conftest)"
  rm -f conftest conftest.o conftest.c
}

termiosccvtimecheck() {
cat << EOF > conftest.c
#include <stddef.h>
#include <stdio.h>
#include <termios.h>
int main(void){size_t sz=offsetof(struct termios,c_cc[VTIME]);(void)printf("%zu",sz);return 0;}
EOF
  $cc -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc -o conftest conftest.o > /dev/null 2>&1
  ccvtime="$(./conftest)"
  rm -f conftest conftest.o conftest.c
}

termioslflagcheck() {
cat << EOF > conftest.c
#include <stddef.h>
#include <stdio.h>
#include <termios.h>
int main(void){size_t sz=offsetof(struct termios,c_lflag);(void)printf("%zu",sz);return 0;}
EOF
  $cc -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc -o conftest conftest.o > /dev/null 2>&1
  lflag="$(./conftest)"
  rm -f conftest conftest.o conftest.c
}

# Option variables
if [ ! -z "$PREFIX" ] ; then
  prefix="$PREFIX"
else
  prefix="/usr/local"
fi

bindirset=0
incdirset=0
libdirset=0
mandirset=0
bindir="$prefix/bin"
incdir="$prefix/include/4q"
libdir="$prefix/lib"
mandir="$prefix/share/man"

lto=0

# Options
for opt
do
  case "$opt" in
    --prefix=*)
      prefix=${opt#*=}
      if [ $bindirset -eq 0 ] ; then
        bindir="$prefix/bin"
      fi
      if [ $incdirset -eq 0 ] ; then
        incdir="$prefix/include/4q"
      fi
      if [ $libdirset -eq 0 ] ; then
        libdir="$prefix/lib"
      fi
      if [ $mandirset -eq 0 ] ; then
        mandir="$prefix/share/man"
      fi
      ;;
    --bindir=*)
      bindir=${opt#*=}
      bindirset=1
      ;;
    --incdir=*)
      incdir=${opt#*=}
      incdirset=1
      ;;
    --libdir=*)
      libdir=${opt#*=}
      libdirset=1
      ;;
    --mandir=*)
      mandir=${opt#*=}
      mandirset=1
      ;;
    --dmd=*)
      DMD=${opt#*=}
      ;;
    --cpp=*)
      PREPROCESSOR=${opt#*=}
      ;;
    --qbe=*)
      QBE=${opt#*=}
      ;;
    --as=*)
      AS=${opt#*=}
      ;;
    --ld=*)
      LD=${opt#*=}
      ;;
    --ar=*)
      AR=${opt#*=}
      ;;
    --ranlib=*)
      RANLIB=${opt#*=}
      ;;
    --help|-h)
      echo "Usage: configure [options]"
      echo ""
      echo "Options:"
      printf "  --help or -h            "
      echo "Display this help message"
      printf "  --prefix=PREFIX         "
      echo "Top level install directory is PREFIX [$prefix]"
      printf "  --bindir=BINDIR         "
      echo "Install executable to BINDIR [$bindir]"
      printf "  --incdir=INCDIR         "
      echo "Install headers to INCDIR [$incdir]"
      printf "  --libdir=LIBDIR         "
      echo "Install executable to LIBDIR [$libdir]"
      printf "  --mandir=MANDIR         "
      echo "Install manual pages to MANDIR [$mandir]"
      printf "  --dmd=DMD               "
      echo "Use specified D compiler [default=autodetect]"
      printf "  --cpp=CPP               "
      echo "Use specified C preprocessor [default=cpp]"
      printf "  --qbe=QBE               "
      echo "Use specified QBE [default=qbe]"
      printf "  --as=AS                 "
      echo "Use specified assembler [default=as]"
      printf "  --ld=LD                 "
      echo "Use specified linker [default=ld]"
      printf "  --ar=AR                 "
      echo "Use specified archiver [default=ar]"
      printf "  --ranlib=RANLIB         "
      die "Use specified ranlib [default=ranlib]"
      ;;
    *)
      ;;
  esac
done

printf "checking for C compiler... "
cccheck
echo "$cc"

printf "checking for D compiler... "
dmdcheck
if [ $? -ne 0 ] ; then
  echo "not found"
  die "error: Please install a D compiler and re-run configure"
else
  echo "$dmd"
fi

printf "checking for default target... "
machinecheck

unsupported=0
case "x$cpu" in
  "xamd64"|"xx86_64"|"xx86-64"|"xx64")
    if [ "x$os" = "xdarwin" ] ; then
      target="amd64_apple"
    else
      if [ "x$os" = "xlinux" ] ; then
        emul="elf_x86_64"
        ldso="/lib64/ld-linux-x86-64.so.2"
        gcclibdir="x86_64-linux-gnu"
      fi
      target="amd64_sysv"
    fi
    arch="x64"
    ;;
  "xarm64"|"xaarch64")
    target="arm64"
    if [ "x$os" = "xdarwin" ] ; then
      target="arm64_apple"
    else
      if [ "x$os" = "xlinux" ] ; then
        emul="aarch64linux"
        ldso="/lib/ld-linux-aarch64.so.1"
        gcclibdir="aarch64-linux-gnu"
      fi
      target="arm64"
    fi
    arch="arm64"
    ;;
  "xriscv64"|"xrv64")
    if [ "x$os" = "xdarwin" ] ; then
      unsupported=1
    else
      if [ "x$os" = "xlinux" ] ; then
        emul="elf64lriscv"
        ldso="/lib/ld-linux-riscv64-lp64d.so.1"
        gcclibdir="riscv64-linux-gnu"
      fi
      target="rv64"
    fi
    arch="rv64"
    ;;
  *)
    target="$cpu"
    unsupported=1
    ;;
esac

echo "$target"
if [ $unsupported -eq 1 ] ; then
  printf "warning: CPU architecture %s not supported by qbe\n" "$cpu"
  if [ "x$os" = "xdarwin" ] ; then
    echo "warning: Defaulting to arm64_sysv"
    target="arm64_sysv"
  else
    echo "warning: Defaulting to amd64_sysv"
    target="amd64_sysv"
  fi
fi

if [ "x$os" = "xdarwin" ] ; then
  printf "checking for macOS version number... "
  darwin="$(uname -r)"
  major=$(echo "$darwin" | awk '{split($0, array, "."); print array[1]}')
  minor=$(echo "$darwin" | awk '{split($0, array, "."); print array[2]}')
  if [ $major -lt 25 ] ; then
    macos=$((major - 9))
  else
    macos=$((major + 1))
  fi
  echo "$macos.$minor"
  printf "checking for Xcode path... "
  xcode="$(xcode-select -p)"
  if [ $? -ne 0 ] ; then
    echo "not found"
    die "error: You must have Xcode tools installed"
  fi
  echo "$xcode"
  clang_ver=$($xcode/usr/bin/clang -dumpversion | awk '{split($0, array, "."); print array[1]}')
  if [ $clang_ver -lt 17 ] ; then
    clang_ver=$($xcode/usr/bin/clang -dumpversion)
  fi
fi

if [ "x$os" = "xlinux" ] ; then
  printf "checking for linux C startup routines... "
  gcc_major="$(gcc --version | head -n 1 | awk '{print $NF}' | awk '{split($0, array, "."); print array[1]}')"
  echo "/usr/lib/gcc/$gcclibdir/$gcc_major"
fi

printf "checking for C preprocessor... "
cppcheck
echo "$preprocessor"

printf "checking for qbe... "
qbecheck
echo "$qbe"

printf "checking for assembler... "
ascheck
if [ "x$assembler" = "x$cc -c" ] ; then
  assembler="$cc"
fi
echo "$assembler"

printf "checking for linker... "
if [ "x$os" = "xdarwin" ] ; then
  ld="$(printf "%s/usr/bin/ld" "$xcode")"
else
  ld="ld"
fi
ldcheck "$ld"
echo "$linker"

printf "checking for ar... "
archeck
echo "$ar"

printf "checking for ranlib... "
ranlibcheck
echo "$ranlib"

printf "checking for real name of stdin... "
stdincheck
echo "$stdin"

printf "checking for real name of stdout... "
stdoutcheck
echo "$stdout"

printf "checking for real name of stderr... "
stderrcheck
echo "$stderr"

printf "checking for value of LC_ALL... "
lcallcheck
echo "$lcall"

printf "checking for size of struct termios... "
termioscheck
echo "$termios"

printf "checking for location of c_cc[VMIN] in struct termios... "
termiosccvmincheck
echo "$ccvmin"

printf "checking for location of c_cc[VTIME] in struct termios... "
termiosccvtimecheck
echo "$ccvtime"

printf "checking for location of c_lflag in struct termios... "
termioslflagcheck
echo "$lflag"

printf "checking for value of ECHO... "
echocheck
echo "$techo"

printf "checking for value of ICANON... "
icanoncheck
echo "$icanon"

printf "checking for value of TCSANOW... "
tcsanowcheck
echo "$tcsanow"

fullpath=0
printf "checking for out-of-tree build... "
if [ "x$(dirname $0)" = "x." ] ; then
  echo "no"
elif [ "x$(dirname $0)" = "x$(pwd)" ] ; then
  echo "no"
else
  fullpath=1
  spath="$(dirname $0)"
  echo "yes"
fi

if [ ! -z "$dflags" ] ; then
  dflags="${dflags## }"
fi

eflag="false"
if [ "x$preprocessor" = "x$cc -E" ] ; then
  preprocessor="$cc"
  eflag="true"
fi

cflag="false"
if [ "x$assembler" = "x$cc" ] ; then
  cflag="true"
fi

cat << EOF >> config.d

string incdir = "$incdir";

string default_target = "$target";

string preprocessor = "$preprocessor";
bool need_Eflag = $eflag;

string qbe = "$qbe";

string assembler = "$assembler";
bool need_cflag = $cflag;

string linker = "$linker";
string stdlibpath = "$libdir/lib4q.a";

string ar = "$ar";
string ranlib = "$ranlib";

int cpu = arch.$arch;
int os = system.$os;

ulong rvpcrel;

string real_stdin = "$stdin";
string real_stdout = "$stdout";
string real_stderr = "$stderr";

string init_init = "export function $.init(w %argc, l %argv) {
@start
	%.0 =l call \$setlocale(w $lcall, l \$.str.locale)
	%size =l shl 1, 10
	storel %size, $.sz
	%stack =l call $.xmalloc(l %size)
	storel %stack, $.stack
	%.0 =l extsw %argc
	%ac =l extsw %argc
	call $.push(l 0)
@loop
	%ac =l sub %ac, 1
	%offset =l shl %ac, 3
	%addr =l add %argv, %offset
	call $.push(l %addr)
	%cmp =l ceql %ac, 0
	jnz %cmp, @done, @loop
@done
	call $.push(l %.0)
	ret
}\n";

string writestderr_init = "export function $.writestderr(l %s) {
@start
	%.stderr =l loadl \$$stderr
	%.0 =w call \$fwprintf(l %.stderr, l \$.str.wfmts, ..., l %s)
	ret
}\n";

string key_init = "export function \$key() {
@start
	%old =l alloc8 $termios
	%new =l alloc8 $termios
	%.0 =w call \$tcgetattr(w 0, l %old)
	%.0 =l call \$memcpy(l %new, l %old, l $termios)
	%icanon =l xor $icanon, -1
	%echo =l xor $techo, -1
	%addr =l add %new, $lflag
	%val =l loadl %addr
	%val =l and %val, %icanon
	%val =l and %val, %echo
	storel %val, %addr
	%addr =l add %new, $ccvmin
	storeb 1, %addr
	%addr =l add %new, $ccvtime
	storeb 0, %addr
	%.0 =w call \$tcsetattr(w 0, w $tcsanow, l %new)
	%c =w call \$getwchar()
	%.0 =w call \$tcsetattr(w 0, w $tcsanow, l %old)
	%ch =l extuw %c
	call $.push(l %ch)
	ret
}\n";
EOF

printf "creating Makefile... "
Makefile
echo "done"
